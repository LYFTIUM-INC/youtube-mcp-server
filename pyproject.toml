[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "youtube-mcp-server"
version = "0.1.0"
description = "Comprehensive YouTube Analytics MCP Server with advanced data analysis capabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "YouTube MCP Team", email = "team@example.com"}
]
maintainers = [
    {name = "YouTube MCP Team", email = "team@example.com"}
]
keywords = ["youtube", "analytics", "mcp", "model-context-protocol", "data-analysis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Information Analysis"
]
requires-python = ">=3.9"

dependencies = [
    # Core MCP and API
    "fastmcp>=0.2.0",
    "google-api-python-client>=2.108.0",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.2.0",
    
    # Data Analysis
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    
    # Visualization
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "wordcloud>=1.9.2",
    
    # Text Analysis
    "spacy>=3.6.0",
    "textblob>=0.17.1",
    "nltk>=3.8.1",
    
    # Computer Vision
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    
    # Network Analysis
    "networkx>=3.0",
    
    # Video/Audio Processing
    "yt-dlp>=2023.7.6",
    "youtube-transcript-api>=0.6.0",
    
    # Infrastructure
    "redis>=4.6.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "cachetools>=5.3.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    
    # Data Export
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
    "pyarrow>=12.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0"
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.22.0"
]

performance = [
    "uvloop>=0.17.0",
    "orjson>=3.9.0",
    "lxml>=4.9.0"
]

ml-extended = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "sentence-transformers>=2.2.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/youtube-mcp-server"
Documentation = "https://yourusername.github.io/youtube-mcp-server"
Repository = "https://github.com/yourusername/youtube-mcp-server"
Issues = "https://github.com/yourusername/youtube-mcp-server/issues"

[project.scripts]
youtube-mcp = "youtube_mcp_server.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/youtube_mcp_server"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["youtube_mcp_server"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.*",
    "youtube_transcript_api.*",
    "cv2.*",
    "networkx.*",
    "plotly.*",
    "wordcloud.*",
    "spacy.*",
    "textblob.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/youtube_mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require API access"
]

[tool.coverage.run]
source = ["src/youtube_mcp_server"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.ruff]
select = ["E", "F", "W", "I", "N", "UP", "ANN", "S", "B", "C4", "DTZ", "EM", "ICN", "PIE", "PT", "RET", "SIM", "TID", "ARG", "PTH", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["ANN101", "ANN102", "S101", "PLR0913"]
line-length = 88
target-version = "py39"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ANN201", "ANN001"]